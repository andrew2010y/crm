package com.sdzn.fuzhuxian.api.controller.app.login;

import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.sdzn.fuzhuxian.api.controller.BaseController;
import com.sdzn.fuzhuxian.api.controller.JsonResultBuilder;
import com.sdzn.fuzhuxian.api.controller.Status;
import com.sdzn.fuzhuxian.api.controller.user.AccountContainerForServletContext;
import com.sdzn.fuzhuxian.api.domain.model.user.Account;
import com.sdzn.fuzhuxian.api.service.user.AccountService;

@RestController
//@RequestMapping("/app/login")
public class LoginController extends BaseController {

    @Autowired
    private AccountService accountService;

    @RequestMapping(value = "/login", method = {RequestMethod.POST})//POST
    private void login(@RequestParam(value = "accountName") String accountName,
                       @RequestParam(value = "password") String password,
                       @RequestParam(value = "token") String token,
                       @RequestParam(value = "clientType") String clientType,
                       HttpServletRequest request, HttpServletResponse response
    ) {

        resultBuilder = new JsonResultBuilder();

        //参数校验
        if (!loginValidate(accountName, password, token, clientType)) {

            resultBuilder.setStatus(Status.PARSE_PARAMETERS_ERROR);

        } else {
            if (StringUtils.isBlank(token)){
            	token = UUID.randomUUID().toString().replace("-", "");
            }

            Account account = accountService.getByNameAndPassword(accountName.trim(), password.trim());

            if (account == null) {

                resultBuilder.setStatus(Status.USER_NOT_FOUND_ERROR);

            } else {

                AccountContainerForServletContext containerForServletContext = new AccountContainerForServletContext(request.getServletContext());
                containerForServletContext.delAccount(account.getId());
                containerForServletContext.setAccount(token, account);
            }
        }
        
        //根据用户名查询账户信息
       // doResponse(request, response);
        doResponse(request, response, token);
    }


    @RequestMapping(value = "/logout", method = {RequestMethod.GET})
    private void logout(@RequestParam(value = "token") String token,
                        HttpServletRequest request, HttpServletResponse response) {

        resultBuilder = new JsonResultBuilder();

        if (!logoutValidate(token)) {

            resultBuilder.setStatus(Status.PARSE_PARAMETERS_ERROR);
        } else {

            AccountContainerForServletContext containerForServletContext = new AccountContainerForServletContext(request.getServletContext());

            Account account = containerForServletContext.getAccount(token);

            if (account == null) {

                resultBuilder.setStatus(Status.USER_INVALID_ERROR);
            } else {

                containerForServletContext.delAccount(account.getId());
            }
        }

        doResponse(request, response);
    }

    /**
     * 退出校验
     *
     * @param token
     * @return
     */
    public boolean logoutValidate(String token) {

        if (StringUtils.isBlank(token))
            return false;
        return true;
    }

    /**
     * 登录校验
     *
     * @param accountName
     * @param password
     * @param token
     * @param clientType
     * @return
     */
    public boolean loginValidate(String accountName, String password, String token, String clientType) {

        if (StringUtils.isBlank(accountName))
            return false;

        if (StringUtils.isBlank(password))
            return false;

   /*     if (StringUtils.isBlank(token))
            return false;*/

        if (StringUtils.isBlank(clientType))
            return false;

        return true;
    }
}
