/**
 * 文件名：UserSchoolTeacherController
 * 版权：Copyright 2002-2017 SDZN. All Rights Reserved.
 * 描述：
 * 修改人：王宁
 * 修改时间：16/7/14
 * 修改内容：新增
 */
package com.sdzn.fuzhuxian.api.controller.user;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.sdzn.fuzhuxian.api.controller.BaseController;
import com.sdzn.fuzhuxian.api.controller.JsonResultBuilder;
import com.sdzn.fuzhuxian.api.controller.Status;
import com.sdzn.fuzhuxian.api.domain.model.user.SchoolTeacher;
import com.sdzn.fuzhuxian.api.service.user.SchoolTeacherService;

/**
 * UserSchoolTeacherController〈学校老师〉 〈功能详细描述〉
 * 
 * @author 王宁
 * @version v1.0.0
 * @see ［相关类/方法］
 * @since 产品/模块版本
 */
@Controller
@RequestMapping("/user/SchoolTeacher")
public class UserSchoolTeacherController extends BaseController {

	@Autowired
	private SchoolTeacherService teacherService;
	private static final int FAIL = 0;

	/**
	 * 获取所有的学校教师列表
	 * 
	 * @param request
	 * @param response
	 */
	@RequestMapping("/list")
	public void getAdminAll(HttpServletRequest request,
			HttpServletResponse response) {

		List<SchoolTeacher> list = new ArrayList<SchoolTeacher>();
		try {

			list = teacherService.selectAll();
		} catch (Exception e) {

			logger.error(e.toString());
		}
		this.doResponse(request, response, list);

	}

	/**
	 * 添加学校教师
	 * 
	 * @param request
	 * @param response
	 * @param schoolTeache
	 */
	@RequestMapping("/add")
	public void add(HttpServletRequest request, HttpServletResponse response,
			SchoolTeacher schoolTeache) {

		resultBuilder = new JsonResultBuilder();
		if (!insertValidate(schoolTeache)) {
			resultBuilder.setStatus(Status.PARSE_PARAMETERS_ERROR);
		} else {

			int row = teacherService.insertTeacher(schoolTeache);
			if (row == FAIL) {
				resultBuilder.setStatus(Status.DB_OPERATION_ERROR);
			}
		}
		doResponse(request, response);

	}

	/**
	 * 修改学校教师
	 * 
	 * @param request
	 * @param response
	 * @param schoolTeacher
	 */
	@RequestMapping("/update")
	public void update(HttpServletRequest request,
			HttpServletResponse response, SchoolTeacher schoolTeacher) {

		resultBuilder = new JsonResultBuilder();
		if (!updateValidate(schoolTeacher)) {

			resultBuilder.setStatus(Status.PARSE_PARAMETERS_ERROR);
		} else {

			try {

				if (FAIL == teacherService.updateTeacher(schoolTeacher)) {

					resultBuilder.setStatus(Status.DB_OPERATION_ERROR);
				}

			} catch (Exception e) {

				resultBuilder.setStatus(Status.DB_OPERATION_ERROR);
				logger.error(e.toString());
			}

		}

		doResponse(request, response);

	}

	/**
	 * 删除学校教师
	 * 
	 * @param request
	 * @param response
	 * @param id
	 */
	@RequestMapping("/delete")
	public void delete(HttpServletRequest request,
			HttpServletResponse response, @RequestParam String id) {
		resultBuilder = new JsonResultBuilder();

		if (!deleteValidate(id)) {

			resultBuilder.setStatus(Status.PARSE_PARAMETERS_ERROR);
		} else {

			try {

				if (FAIL == teacherService.deleteTeacher(Integer.parseInt(id))) {

					resultBuilder.setStatus(Status.DB_OPERATION_ERROR);
				}
			} catch (Exception e) {

				resultBuilder.setStatus(Status.DB_OPERATION_ERROR);
				logger.error(e.toString());
			}
		}
		doResponse(request, response);

	}

	private boolean updateValidate(SchoolTeacher schoolTeacher) {

		if (schoolTeacher == null)
			return false;

		if (StringUtils.isBlank(schoolTeacher.getAccountName()))
			return false;

		if (StringUtils.isBlank(schoolTeacher.getRealName()))
			return false;

		if (StringUtils.isBlank(schoolTeacher.getSchoolName()))
			return false;

		return true;
	}

	private boolean insertValidate(SchoolTeacher schoolTeacher) {

		if (schoolTeacher == null)
			return false;

		if (StringUtils.isBlank(schoolTeacher.getAccountName()))
			return false;

		if (StringUtils.isBlank(schoolTeacher.getRealName()))
			return false;

		if (StringUtils.isBlank(schoolTeacher.getSchoolName()))
			return false;

		return true;
	}

	private boolean deleteValidate(String id) {

		if (StringUtils.isBlank(id))
			return false;

		return true;
	}
}
